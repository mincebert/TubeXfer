*BASIC
NEW
AUTO
REM>TubeXfr
ver$="v2.4 (2021-09-06)"
:
DIM code% &200,params% 11
OSBYTE=&FFF4
TUBECALL=&406
TUBEID=&10 : REM our ID
TUBEXFERBBC=&FEE5
TUBEXFERELK=&FCE5
USERV=&200
:
REM need 2+11 bytes in zeropage
scratch=&70
parambuf=scratch+2
:
iocode%=&2000 : REM could be FNoshwm but this is safe for all
:
FOR pass%=0 TO 1
P%=iocode%
O%=code%
:
[ OPT 4+2*pass%
.start
CMP #&E0 \ OSWORD &E0
BEQ ourosword
JMP (olduserv)
:
\ include version string for
\ manual checking with *DUMP
EQUS ver$
EQUB 0
:
.olduserv
EQUW 0 \ for old USERV addr
:
.paramstoobig
BRK
EQUB 20 \ =Too big
EQUS "Parameter block too big"
EQUB 0
:
.unkop
BRK
EQUB 1 \ =Out of range
EQUS "Unknown operation"
EQUB 0
:
.ourosword
\ store OSWORD param addr in
\ scratch
STX scratch
STY scratch+1
:
LDY #0
LDA (scratch),Y \ #sent bytes
CMP #12 \ =max size + 1
BCS paramstoobig
TAY
\ Y=num bytes OSWORD params
DEY
.paramcopyloop
LDA (scratch),Y
STA parambuf,Y
DEY
BPL paramcopyloop
:
\ check the operation code
LDA parambuf+2
CMP #0 \ =2nd>IO
BEQ xfer2io
CMP #&FE \ =unload
BEQ unload
CMP #&FF
BNE unkop
:
.done
\ return with OSWORD handled for
\ &FF=test for presence and jump
\ here after other operations
LDA #0
RTS
:
.unload
\ check we're still USERV
LDA USERV
CMP #start MOD 256
BNE uservrehooked
LDA USERV+1
CMP #start DIV 256
BNE uservrehooked
\ restore USERV
PHP
SEI
LDA olduserv
STA USERV
LDA olduserv+1
STA USERV+1
PLP
JMP done
:
.uservrehooked
BRK
EQUB 254 \ =Bad command
EQUS "USERV re-hooked by another program"
EQUB 0
:
.xfer2io
.tubeclaim
LDA #&C0+TUBEID
JSR TUBECALL
BCC tubeclaim
:
\ skip 256 byte xfer if <256
LDA parambuf+10
BEQ xfer2
:
\ use fast 256-byte transfer
\ mode for multiples of 256
.xfer256
LDA #6 \ 256-byte 2>IO
\ 2nd proc addr -> YX
LDX #(parambuf+3) MOD 256
LDY #(parambuf+3) DIV 256
JSR TUBECALL
:
\ need to wait >=19us = 38cy for
\ setup - already waiting 12 in
\ first iteration, below
LDX #5 \ 2cy, *5/4=+24cy
.wait19loop
DEX \ 2cy
BNE wait19loop \ 3cy (taken)/2cy
:
\ count transferred
LDY #0 \ 2cy
.xfer256loop
\ need to wait >=10us = 20cy
\ between TUBEXFER accesses
NOP \ 5*2cy=10cy
NOP
NOP
NOP
NOP
.elkpatch1
LDA TUBEXFERBBC \ 4cy
STA (parambuf+7),Y \ 6cy
INY \ 2cy
BNE xfer256loop \ 3cy
:
INC parambuf+4 \ 2nd 3MSBy
BNE xfer256inc
INC parambuf+5 \ 2nd 2MSBy
BNE xfer256inc
INC parambuf+6 \ 2nd MSBy
.xfer256inc
INC parambuf+8 \ IO MSB
DEC parambuf+10 \ size MSB
BNE xfer256
:
\ use 2-byte transfer mode for
\ remaining bytes <256
.xfer2
\ skip if no <256 bytes
LDA parambuf+9
BEQ tuberelease
:
LDA #2 \ 2-byte 2>IO
\ 2nd proc addr -> YX
LDX #(parambuf+3) MOD 256
LDY #(parambuf+3) DIV 256
JSR TUBECALL
:
\ initialise count xferred
LDY #0 \ 2cy
:
\ need to wait >=26us = 52cy
\ for setup - already waiting
\ 2 in first iteration, below
LDX #10 \ 2cy, *5/4=>+49cy
.xfer2loop
DEX \ 2cy
BNE xfer2loop \ 3cy (taken)/2cy
.elkpatch2
LDA TUBEXFERBBC \ first byte
STA (parambuf+7),Y
.elkpatch3
LDA TUBEXFERBBC \ second byte
\ need to wait >=26us = 52cy
\ this part uses 24 before loop
INY \ 2cy
CPY parambuf+9 \ 3cy
BEQ tuberelease \ 2cy (fail)
STA (parambuf+7),Y \ 6cy
INY \ 2cy
CPY parambuf+9 \ 3cy
BEQ tuberelease \ 2cy (fail)
LDX #6 \ 2cy, *5/4=>+29cy
JMP xfer2loop \ 3cy
:
.tuberelease
LDA #&80+TUBEID
JSR TUBECALL
JMP done
:
\ end address for IO proc code
.end
:
\ EXEC addr - install routine
.exec
\ check Tube present
LDA #234
LDX #0
LDY #&FF
JSR OSBYTE
CPX #&FF
BEQ hwcheck
\ Tube not present - print error
BRK
EQUB 254 \ =Bad command
EQUS "No Tube present"
EQUB 0
:
.hwcheck
\ if BBC, skip patching tubexfer
LDA #0
LDX #1
JSR OSBYTE
CPX #0
BNE uservxferchk
:
\ patch tubexfer for Electron;
\ we do this whether we've
\ already hooked or not as
\ we need to ensure TUBEXFR is
\ correct for this hardware;
\ hope a call doesn't come in
.elkpatch
LDX #&FF
.elkpatchloop
INX
LDA elkpatchtbl,X
STA scratch
INX
LDA elkpatchtbl,X
STA scratch+1
LDY #1 : \ addr after opcode
LDA #TUBEXFERELK MOD 256
STA (scratch),Y
INY
LDA #TUBEXFERELK DIV 256
STA (scratch),Y
INX
LDA elkpatchtbl,X
BEQ elkpatchloop
:
.uservxferchk
\ check if our address is in
\ USERV
LDA USERV
CMP #start MOD 256
BNE uservalreadychk
LDA USERV+1
CMP #start DIV 256
BNE uservalreadychk
BRK
EQUB 254
EQUS "TubeXfer already installed"
EQUB 0
:
.uservalreadychk
\ check if USERV already hooked
\ which we class as >=&8000
\ (really >=&C000 =MOS)
LDA USERV+1
BMI uservhook
\ already patched - print error
BRK
EQUB 254 \ =Bad command
EQUS "USERV already hooked"
EQUB 0
:
.uservhook
\ hook USERV to catch OSWORD
PHP
SEI
LDA USERV
STA olduserv
LDA USERV+1
STA olduserv+1
LDA #start MOD 256
STA USERV
LDA #start DIV 256
STA USERV+1
PLP
RTS
:
.elkpatchtbl
EQUW elkpatch1
EQUB 0
EQUW elkpatch2
EQUB 0
EQUW elkpatch3
EQUB &FF
]
:
NEXT
codelen%=P%-iocode%
:
savecmd$="SAVE TubeXfrX "+STR$~(code%)+"+"+STR$~(codelen%)+" "+STR$~(exec OR &FFFF0000)+" "+STR$~(iocode% OR &FFFF0000)
PRINT "*";savecmd$
OSCLI(savecmd$)
PRINT "Done"
END
:
REM gets IO processor OSHWM
DEFFNoshwm
A%=&B4
X%=0
Y%=&FF
=USR(OSBYTE) AND &FF00
