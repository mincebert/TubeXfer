*BASIC
NEW
AUTO
REM>TubeXfr
ver$="v3.1 (2021-11-01)"
:
DIM code% &200
OSBYTE=&FFF4
TUBECALL=&406
TUBEID=&10 : REM our ID
TUBEXFERBBC=&FEE5
TUBEXFERELK=&FCE5
USERV=&200
:
REM need 2+12 bytes in zeropage
scratch=&70
parambuf=scratch+2
param_nsnd=parambuf+0
param_nrtn=parambuf+1
param_rtn=parambuf+2
param_op=parambuf+3
param_paddr=parambuf+4
param_haddr=parambuf+8
param_bytes=parambuf+10
parambufsize=12
DIM params% parambufsize
:
hcode%=&2000 : REM could be FNoshwm but this is safe for all
:
FOR pass%=0 TO 1
P%=hcode%
O%=code%
:
[ OPT 4+2*pass%
.start
CMP #&E0 \ OSWORD &E0
BEQ ourosword
JMP (olduserv)
:
\ include version string for
\ manual checking with *DUMP
EQUS ver$
EQUB 0
:
.olduserv
EQUW 0 \ for old USERV addr
:
.ourosword
\ store OSWORD param addr in
\ scratch
STX scratch
STY scratch+1
:
LDY #param_nsnd-parambuf
LDA (scratch),Y \ #sent bytes
CMP #parambufsize+1
BCS doneerror
TAY
\ Y=num bytes OSWORD params
DEY
.paramcopyloop
LDA (scratch),Y
STA parambuf,Y
DEY
BPL paramcopyloop
:
\ check the operation code
LDA param_op
CMP #0 \ =P>H
BEQ xfer2h
CMP #&FE \ =unload
BEQ unload
CMP #&FF \ =test presence
BNE doneerror
\ test presence - just return
\ success
:
.doneok
\ done successfully
LDA #1
\ store return value only if it
\ is included in the number of
\ return bytes
.done
LDY param_nrtn
CPY #param_nrtn-parambuf
BCC donereturn
LDY #param_rtn-parambuf
STA (scratch),Y
.donereturn
\ return with OSWORD handled
LDA #0
RTS
:
.doneerror
LDA #&FF \ =return error
JMP done
:
.unload
\ check we're still USERV
LDA USERV
CMP #start MOD 256
BNE doneerror
LDA USERV+1
CMP #start DIV 256
BNE doneerror
\ restore USERV
PHP
SEI
LDA olduserv
STA USERV
LDA olduserv+1
STA USERV+1
PLP
JMP doneok
:
.xfer2h
.tubeclaim
LDA #&C0+TUBEID
JSR TUBECALL
BCC tubeclaim
:
\ skip 256 byte xfer if <256
LDA param_bytes+1
BEQ xfer2
:
\ use fast 256-byte transfer
\ mode for multiples of 256
.xfer256
LDA #6 \ 256-byte P>H
\ parasite addr -> YX
LDX #param_paddr MOD 256
LDY #param_paddr DIV 256
JSR TUBECALL
:
\ need to wait >=19us = 38cy for
\ setup - already waiting 12 in
\ first iteration, below
LDX #5 \ 2cy, *5/4=+24cy
.wait19loop
DEX \ 2cy
BNE wait19loop \ 3cy (taken)/2cy
:
\ count transferred
LDY #0 \ 2cy
.xfer256loop
\ need to wait >=10us = 20cy
\ between TUBEXFER accesses
NOP \ 5*2cy=10cy
NOP
NOP
NOP
NOP
.elkpatch1
LDA TUBEXFERBBC \ 4cy
STA (param_haddr),Y \ 6cy
INY \ 2cy
BNE xfer256loop \ 3cy
:
INC param_paddr+1 \ P 3MSBy
BNE xfer256inc
INC param_paddr+2 \ P 2MSBy
BNE xfer256inc
INC param_paddr+3 \ P 1MSBy
.xfer256inc
INC param_haddr+1 \ H MSBy
DEC param_bytes+1 \ size MSBy
BNE xfer256
:
\ use 2-byte transfer mode for
\ remaining bytes <256
.xfer2
\ skip if no <256 bytes
LDA param_bytes \ size LSBy
BEQ tuberelease
:
LDA #2 \ 2-byte P>H
\ parasite addr -> YX
LDX #(param_paddr) MOD 256
LDY #(param_paddr) DIV 256
JSR TUBECALL
:
\ initialise count xferred
LDY #0 \ 2cy
:
\ need to wait >=26us = 52cy
\ for setup - already waiting
\ 2 in first iteration, below
LDX #10 \ 2cy, *5/4=>+49cy
.xfer2loop
DEX \ 2cy
BNE xfer2loop \ 3cy (taken)/2cy
.elkpatch2
LDA TUBEXFERBBC \ first byte
STA (param_haddr),Y
.elkpatch3
LDA TUBEXFERBBC \ second byte
\ need to wait >=26us = 52cy
\ this part uses 24 before loop
INY \ 2cy
CPY param_bytes \ 3cy
BEQ tuberelease \ 2cy (fail)
STA (param_haddr),Y \ 6cy
INY \ 2cy
CPY param_bytes \ 3cy
BEQ tuberelease \ 2cy (fail)
LDX #6 \ 2cy, *5/4=>+29cy
JMP xfer2loop \ 3cy
:
.tuberelease
LDA #&80+TUBEID
JSR TUBECALL
JMP doneok
:
\ end address for H proc code
.end
:
\ EXEC addr - install routine
.exec
\ check Tube present
LDA #234
LDX #0
LDY #&FF
JSR OSBYTE
CPX #&FF
BEQ hwcheck
\ Tube not present - print error
BRK
EQUB 254 \ =Bad command
EQUS "No Tube present"
EQUB 0
:
.hwcheck
\ if BBC, skip patching tubexfer
LDA #0
LDX #1
JSR OSBYTE
CPX #0
BNE uservxferchk
:
\ patch tubexfer for Electron;
\ we do this whether we've
\ already hooked or not as
\ we need to ensure TUBEXFR is
\ correct for this hardware;
\ hope a call doesn't come in
.elkpatch
LDX #&FF
.elkpatchloop
INX
LDA elkpatchtbl,X
STA scratch
INX
LDA elkpatchtbl,X
STA scratch+1
LDY #1 : \ addr after opcode
LDA #TUBEXFERELK MOD 256
STA (scratch),Y
INY
LDA #TUBEXFERELK DIV 256
STA (scratch),Y
INX
LDA elkpatchtbl,X
BEQ elkpatchloop
:
.uservxferchk
\ check if our address is in
\ USERV
LDA USERV
CMP #start MOD 256
BNE uservalreadychk
LDA USERV+1
CMP #start DIV 256
BNE uservalreadychk
BRK
EQUB 254
EQUS "TubeXfer already installed"
EQUB 0
:
.uservalreadychk
\ check if USERV already hooked
\ which we class as >=&8000
\ (really >=&C000 =MOS)
LDA USERV+1
BMI uservhook
\ already patched - print error
BRK
EQUB 254 \ =Bad command
EQUS "USERV already hooked"
EQUB 0
:
.uservhook
\ hook USERV to catch OSWORD
PHP
SEI
LDA USERV
STA olduserv
LDA USERV+1
STA olduserv+1
LDA #start MOD 256
STA USERV
LDA #start DIV 256
STA USERV+1
PLP
RTS
:
.elkpatchtbl
EQUW elkpatch1
EQUB 0
EQUW elkpatch2
EQUB 0
EQUW elkpatch3
EQUB &FF
]
:
NEXT
codelen%=P%-hcode%
:
savecmd$="SAVE TubeXfrX "+STR$~(code%)+"+"+STR$~(codelen%)+" "+STR$~(exec OR &FFFF0000)+" "+STR$~(hcode% OR &FFFF0000)
PRINT "*";savecmd$
OSCLI(savecmd$)
PRINT "Done"
END
:
REM gets host processor OSHWM
DEFFNoshwm
A%=&B4
X%=0
Y%=&FF
=USR(OSBYTE) AND &FF00
